buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'eclipse'
	id 'idea'

	id 'maven'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.2'
	id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'org.sonarqube'

group = 'de.cronn'

version = "1.3"

if (System.env.BUILD_NUMBER) {
	version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

jacocoTestReport {
	reports {
		html.enabled = false
		xml.enabled = true
		csv.enabled = false
	}
	dependsOn test
}

tasks.withType(JavaCompile) {
	options.incremental = true
}

wrapper {
	gradleVersion = "4.8.1"
	distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "benedikt.waldvogel"
            name "Benedikt Waldvogel"
            email "benedikt.waldvogel@cronn.de"
        }
		developer {
			id "lukasz.dziedziul"
			name "Lukasz Dziedziul"
			email "lukasz.dziedziul@cronn.de"
		}
    }

    scm {
       url "https://github.com/cronn-de/ssh-proxy"
    }
}

publishing {
    publications {
        CronnPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version project.version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'Pure Java implementation to tunnel to TCP endpoints through SSH')
				root.appendNode('name', project.name)
				root.appendNode('url', 'https://github.com/cronn-de/ssh-proxy')
				root.children().last() + pomConfig
			}
        }
    }
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

	publications = ['CronnPublication']
	dryRun = false
	pkg {
		repo = 'maven'
		name = rootProject.name
		userOrg = 'cronn'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/cronn-de/ssh-proxy'
		issueTrackerUrl = 'https://github.com/cronn-de/ssh-proxy/issues'
		vcsUrl = 'https://github.com/cronn-de/ssh-proxy.git'
		version {
			name = project.version
			released = new Date()
		}
	}
	override = true
}

ext {
	jschVersion = "0.1.54"
	jzlibVersion = "1.1.3"
	slf4jVersion = "1.7.21"
	apacheSshdVersion = "2.0.0"
	junitVersion = "4.12"
	logbackVersion = "1.2.3"
	mockitoVersion = "2.19.0"
}

dependencies {
	compile "org.slf4j:slf4j-api:${slf4jVersion}"

	compile "com.jcraft:jsch:${jschVersion}"
	runtime "com.jcraft:jzlib:${jzlibVersion}"

	testCompile "junit:junit:${junitVersion}"
	testCompile "org.mockito:mockito-core:${mockitoVersion}"
	testCompile ("org.apache.sshd:apache-sshd:${apacheSshdVersion}") {
		exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	}

	testRuntime	"ch.qos.logback:logback-classic:${logbackVersion}"
	testRuntime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

}
