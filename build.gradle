buildscript {
    repositories {
        mavenCentral()
    }
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'

    id 'org.sonarqube' version '3.1.1'
}

group = 'de.cronn'

version = "1.6"

if (System.env.BUILD_NUMBER) {
    version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        html.enabled = false
        xml.enabled = true
        csv.enabled = false
    }
    dependsOn test
}

wrapper {
    gradleVersion = "7.0"
    distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            pom {
                name = project.name
                description = 'Pure Java implementation to tunnel to TCP endpoints through SSH'
                url = 'https://github.com/cronn/ssh-proxy'

                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        id = "benedikt.waldvogel"
                        name = "Benedikt Waldvogel"
                        email = "benedikt.waldvogel@cronn.de"
                    }
                }

                scm {
                    url = "https://github.com/cronn/ssh-proxy"
                }
            }

            from components.java

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : System.getenv('NEXUS_USERNAME')
                password = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : System.getenv('NEXUS_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

dependencies {
    implementation "org.slf4j:slf4j-api:latest.release"

    implementation "com.jcraft:jsch:latest.release"
    runtimeOnly "com.jcraft:jzlib:latest.release"

    testImplementation "junit:junit:latest.release"
    testImplementation "org.mockito:mockito-core:latest.release"

    testImplementation "org.apache.sshd:sshd-core:latest.release"
    testRuntimeOnly "org.bouncycastle:bcprov-jdk15on:latest.release"

    testRuntimeOnly "ch.qos.logback:logback-classic:latest.release"
    testRuntimeOnly "org.slf4j:jcl-over-slf4j:latest.release"

    components.all { ComponentMetadataDetails details ->
        if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA|M\d+).*/) {
            details.status = 'milestone'
        }
    }
}

dependencyLocking {
    lockAllConfigurations()
}
