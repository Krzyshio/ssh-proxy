buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java-library'
	id 'jacoco'
	id 'eclipse'
	id 'idea'

	id 'maven'
	id 'maven-publish'
	id 'org.sonarqube' version '2.7.1'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'com.github.kt3k.coveralls' version '2.8.4'
}

group = 'de.cronn'

version = "1.4"

if (System.env.BUILD_NUMBER) {
	version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

jacocoTestReport {
	reports {
		html.enabled = false
		xml.enabled = true
		csv.enabled = false
	}
	dependsOn test
}

wrapper {
	gradleVersion = "6.0.1"
	distributionType = Wrapper.DistributionType.ALL
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		CronnPublication(MavenPublication) {
			groupId = project.group
			artifactId = project.name
			version = project.version
			pom {
				name = project.name
				description = 'Pure Java implementation to tunnel to TCP endpoints through SSH'
				url = 'https://github.com/cronn-de/ssh-proxy'

				licenses {
					license {
						name = "The Apache Software License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
						distribution = "repo"
					}
				}

				developers {
					developer {
						id = "benedikt.waldvogel"
						name = "Benedikt Waldvogel"
						email = "benedikt.waldvogel@cronn.de"
					}
				}

				scm {
				   url = "https://github.com/cronn-de/ssh-proxy"
				}
			}

			from components.java

			artifact sourcesJar
			artifact javadocJar

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

	publications = ['CronnPublication']
	dryRun = false
	pkg {
		repo = 'maven'
		name = rootProject.name
		userOrg = 'cronn'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/cronn-de/ssh-proxy'
		issueTrackerUrl = 'https://github.com/cronn-de/ssh-proxy/issues'
		vcsUrl = 'https://github.com/cronn-de/ssh-proxy.git'
		version {
			name = project.version
			released = new Date()
		}
	}
	override = true
}

dependencies {
	implementation "org.slf4j:slf4j-api:latest.release"

	implementation "com.jcraft:jsch:latest.release"
	runtimeOnly "com.jcraft:jzlib:latest.release"

	testImplementation "junit:junit:latest.release"
	testImplementation "org.mockito:mockito-core:latest.release"

	testImplementation "org.apache.sshd:sshd-core:latest.release"
	testRuntimeOnly "org.bouncycastle:bcprov-jdk15on:latest.release"

	testRuntimeOnly	"ch.qos.logback:logback-classic:latest.release"
	testRuntimeOnly "org.slf4j:jcl-over-slf4j:latest.release"

	components.all { ComponentMetadataDetails details ->
		details.statusScheme = ['candidate', 'release']
		if (details.id.version =~ /(?i).+(-|\.)(CANDIDATE|RC|BETA|ALPHA).*/) {
			details.status = 'candidate'
		} else {
			details.status = 'release'
		}
	}

}

dependencyLocking {
	lockAllConfigurations()
}
