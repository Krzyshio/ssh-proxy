buildscript {
	dependencies {
		def sonarqubeVersion = JavaVersion.current().java7 ? "2.0.1" : "2.2.1"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion"
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'eclipse'
	id 'idea'

	id 'maven'
	id 'maven-publish'
	id 'com.jfrog.bintray' version "1.7"
}
apply plugin: "org.sonarqube"

group = 'de.cronn'

version = "1.1"

if (System.env.BUILD_NUMBER) {
	version = "${version}-SNAPSHOT-b${System.env.BUILD_NUMBER}"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

jacoco {
	toolVersion = "0.7.7.201606060606"
}

tasks.withType(JavaCompile) {
	options.incremental = true
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
	distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

	publications = ['mavenJava']
	dryRun = false
	pkg {
		repo = 'maven'
		name = rootProject.name
		userOrg = 'cronn'
		licenses = ['Apache-2.0']
		websiteUrl = 'https://github.com/cronn-de/ssh-proxy'
		issueTrackerUrl = 'https://github.com/cronn-de/ssh-proxy/issues'
		vcsUrl = 'https://github.com/cronn-de/ssh-proxy.git'
		version {
			name = project.version
			released = new Date()
		}
	}
}

ext {
	jschVersion = "0.1.54"
	jzlibVersion = "1.1.3"
	slf4jVersion = "1.7.21"
	apacheSshdVersion = "1.2.0"
	junitVersion = "4.12"
	logbackVersion = "1.1.7"
	mockitoVersion = "2.2.9"
}

dependencies {
	compile "org.slf4j:slf4j-api:${slf4jVersion}"

	compile "com.jcraft:jsch:${jschVersion}"
	runtime "com.jcraft:jzlib:${jzlibVersion}"

	testCompile "junit:junit:${junitVersion}"
	testCompile "org.mockito:mockito-core:${mockitoVersion}"
	testCompile ("org.apache.sshd:apache-sshd:${apacheSshdVersion}") {
		exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	}

	testRuntime	"ch.qos.logback:logback-classic:${logbackVersion}"
	testRuntime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

}
